// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_business_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_business_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_business_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_business_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_business_2eproto;
class business;
struct businessDefaultTypeInternal;
extern businessDefaultTypeInternal _business_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::business* Arena::CreateMaybeMessage<::business>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class business final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:business) */ {
 public:
  inline business() : business(nullptr) {}
  ~business() override;
  explicit PROTOBUF_CONSTEXPR business(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  business(const business& from);
  business(business&& from) noexcept
    : business() {
    *this = ::std::move(from);
  }

  inline business& operator=(const business& from) {
    CopyFrom(from);
    return *this;
  }
  inline business& operator=(business&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const business& default_instance() {
    return *internal_default_instance();
  }
  static inline const business* internal_default_instance() {
    return reinterpret_cast<const business*>(
               &_business_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(business& a, business& b) {
    a.Swap(&b);
  }
  inline void Swap(business* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(business* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  business* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<business>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const business& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const business& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(business* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "business";
  }
  protected:
  explicit business(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kNameFieldNumber = 3,
    kTypeBusinessFieldNumber = 4,
    kDateFieldNumber = 1,
    kForeignFieldNumber = 5,
  };
  // required string address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string typeBusiness = 4;
  bool has_typebusiness() const;
  private:
  bool _internal_has_typebusiness() const;
  public:
  void clear_typebusiness();
  const std::string& typebusiness() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_typebusiness(ArgT0&& arg0, ArgT... args);
  std::string* mutable_typebusiness();
  PROTOBUF_NODISCARD std::string* release_typebusiness();
  void set_allocated_typebusiness(std::string* typebusiness);
  private:
  const std::string& _internal_typebusiness() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_typebusiness(const std::string& value);
  std::string* _internal_mutable_typebusiness();
  public:

  // required int32 date = 1;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  int32_t date() const;
  void set_date(int32_t value);
  private:
  int32_t _internal_date() const;
  void _internal_set_date(int32_t value);
  public:

  // optional bool foreign = 5;
  bool has_foreign() const;
  private:
  bool _internal_has_foreign() const;
  public:
  void clear_foreign();
  bool foreign() const;
  void set_foreign(bool value);
  private:
  bool _internal_foreign() const;
  void _internal_set_foreign(bool value);
  public:

  // @@protoc_insertion_point(class_scope:business)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr typebusiness_;
  int32_t date_;
  bool foreign_;
  friend struct ::TableStruct_business_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// business

// required int32 date = 1;
inline bool business::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool business::has_date() const {
  return _internal_has_date();
}
inline void business::clear_date() {
  date_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t business::_internal_date() const {
  return date_;
}
inline int32_t business::date() const {
  // @@protoc_insertion_point(field_get:business.date)
  return _internal_date();
}
inline void business::_internal_set_date(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  date_ = value;
}
inline void business::set_date(int32_t value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:business.date)
}

// required string address = 2;
inline bool business::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool business::has_address() const {
  return _internal_has_address();
}
inline void business::clear_address() {
  address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& business::address() const {
  // @@protoc_insertion_point(field_get:business.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void business::set_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:business.address)
}
inline std::string* business::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:business.address)
  return _s;
}
inline const std::string& business::_internal_address() const {
  return address_.Get();
}
inline void business::_internal_set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(value, GetArenaForAllocation());
}
inline std::string* business::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000001u;
  return address_.Mutable(GetArenaForAllocation());
}
inline std::string* business::release_address() {
  // @@protoc_insertion_point(field_release:business.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault()) {
    address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void business::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault()) {
    address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:business.address)
}

// required string name = 3;
inline bool business::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool business::has_name() const {
  return _internal_has_name();
}
inline void business::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& business::name() const {
  // @@protoc_insertion_point(field_get:business.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void business::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:business.name)
}
inline std::string* business::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:business.name)
  return _s;
}
inline const std::string& business::_internal_name() const {
  return name_.Get();
}
inline void business::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* business::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* business::release_name() {
  // @@protoc_insertion_point(field_release:business.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void business::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:business.name)
}

// optional string typeBusiness = 4;
inline bool business::_internal_has_typebusiness() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool business::has_typebusiness() const {
  return _internal_has_typebusiness();
}
inline void business::clear_typebusiness() {
  typebusiness_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& business::typebusiness() const {
  // @@protoc_insertion_point(field_get:business.typeBusiness)
  return _internal_typebusiness();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void business::set_typebusiness(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 typebusiness_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:business.typeBusiness)
}
inline std::string* business::mutable_typebusiness() {
  std::string* _s = _internal_mutable_typebusiness();
  // @@protoc_insertion_point(field_mutable:business.typeBusiness)
  return _s;
}
inline const std::string& business::_internal_typebusiness() const {
  return typebusiness_.Get();
}
inline void business::_internal_set_typebusiness(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  typebusiness_.Set(value, GetArenaForAllocation());
}
inline std::string* business::_internal_mutable_typebusiness() {
  _has_bits_[0] |= 0x00000004u;
  return typebusiness_.Mutable(GetArenaForAllocation());
}
inline std::string* business::release_typebusiness() {
  // @@protoc_insertion_point(field_release:business.typeBusiness)
  if (!_internal_has_typebusiness()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = typebusiness_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (typebusiness_.IsDefault()) {
    typebusiness_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void business::set_allocated_typebusiness(std::string* typebusiness) {
  if (typebusiness != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  typebusiness_.SetAllocated(typebusiness, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (typebusiness_.IsDefault()) {
    typebusiness_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:business.typeBusiness)
}

// optional bool foreign = 5;
inline bool business::_internal_has_foreign() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool business::has_foreign() const {
  return _internal_has_foreign();
}
inline void business::clear_foreign() {
  foreign_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool business::_internal_foreign() const {
  return foreign_;
}
inline bool business::foreign() const {
  // @@protoc_insertion_point(field_get:business.foreign)
  return _internal_foreign();
}
inline void business::_internal_set_foreign(bool value) {
  _has_bits_[0] |= 0x00000010u;
  foreign_ = value;
}
inline void business::set_foreign(bool value) {
  _internal_set_foreign(value);
  // @@protoc_insertion_point(field_set:business.foreign)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_business_2eproto
